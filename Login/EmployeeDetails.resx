<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox2.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>